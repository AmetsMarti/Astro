---
import Header from '../components/Header.jsx';
import Footer from '../components/Footer.astro';

interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Amets Martiarena" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	
	<body class="bg-slate-900 dark:bg-slate-900 light:bg-gray-100">
		
		
		<!-- Content layer -->
		<div class="relative z-10">
	
			<slot />
			
			<Footer />
		</div>
	</body>
</html>

<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 48, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	
	/* Dark theme variables */
	.dark {
		--bg-primary: 17, 24, 39; /* gray-900 */
		--bg-secondary: 31, 41, 55; /* gray-800 */
		--bg-card: 55, 65, 81; /* gray-700 */
		--text-primary: 248, 250, 252; /* slate-50 */
		--text-secondary: 203, 213, 225; /* slate-300 */
		--text-muted: 148, 163, 184; /* slate-400 */
		--border-color: 71, 85, 105; /* slate-600 */
	}
	
	/* Light theme variables */
	.light {
		--bg-primary: 249, 250, 251; /* gray-50 */
		--bg-secondary: 243, 244, 246; /* gray-100 */
		--bg-card: 255, 255, 255; /* white */
		--text-primary: 17, 24, 39; /* gray-900 */
		--text-secondary: 55, 65, 81; /* gray-700 */
		--text-muted: 107, 114, 128; /* gray-500 */
		--border-color: 209, 213, 219; /* gray-300 */
	}
	
	html {
		font-family: system-ui, sans-serif;
		background-size: 224px;
		transition: color-scheme 0.3s ease;
	}
	
	.dark {
		color-scheme: dark;
	}
	
	.light {
		color-scheme: light;
	}
	
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}

</style>

<script>
  // Sistema simple de traducciones
  const isClient = typeof window !== 'undefined';
  let currentLanguage = isClient ? (localStorage.getItem('language') || 'es') : 'es';
  let translations = {};

  async function loadLanguage(lang) {
    if (!isClient) return {};
    
    try {
      const response = await fetch(`/locales/${lang.toLowerCase()}/translation.json`);
      translations = await response.json();
      currentLanguage = lang;
      localStorage.setItem('language', lang);
      return translations;
    } catch (error) {
      console.warn(`Could not load ${lang}, falling back to Spanish`);
      if (lang !== 'es') {
        return loadLanguage('es');
      }
      return {};
    }
  }

  function t(key, defaultValue = key) {
    const keys = key.split('.');
    let value = translations;
    
    for (const k of keys) {
      if (value && typeof value === 'object' && k in value) {
        value = value[k];
      } else {
        return defaultValue;
      }
    }
    
    return value || defaultValue;
  }

  async function changeLanguage(newLang) {
    if (!isClient) return;
    
    try {
      await loadLanguage(newLang);
      // Disparar evento personalizado para que otras partes de la página se actualicen
      document.dispatchEvent(new CustomEvent('languageChanged', { 
        detail: { language: newLang } 
      }));
    } catch (error) {
      console.error('Error changing language:', error);
    }
  }

  // Inicializar al cargar la página (solo en el cliente)
  if (isClient) {
    window.addEventListener('DOMContentLoaded', () => {
      loadLanguage(currentLanguage);
    });

    // Exportar funciones globalmente
    window.t = t;
    window.changeLanguage = changeLanguage;
    window.currentLanguage = currentLanguage;
  }
</script>

